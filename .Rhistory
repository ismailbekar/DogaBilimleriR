output$v <- volume(dbh=output$dbh,height=output$height)
##Now we sum up to get stand values:
standout <- do.call(rbind,by(data=output,INDICES=output$period,FUN=function(e){
domheight <- e[order(e$dbh,decreasing=TRUE),]
domheight$blow <- blow
domheight <- mean(domheight[cumsum(domheight$blow) <= 100,"height"])
ret <- data.frame(period=unique(e$period),sba=sum((e$dbh/100)^2 * pi/4) * blow,N=nrow(e) * blow,
Vol=sum(e$v) * blow,dG=unique(e$dG),sdi=unique(e$sdi),ccf=unique(e$ccf),h100=domheight)
ret
}))
endoutput <- list(tree=output,stand=standout)
writeLines(c("'$tree' for tree values and '$stand' for stand value"))
endoutput
###########################
}##end of simulator function
############################
aa <- mysimulator(teststands,500, 1000)
setwd("/Volumes/share-ites-1-$/ETH Zurich/Courses/Quantitative Vegetation Dynamics/Week 5")
##### Basal Area Increment Model
bai <- read.table("data_for_bai.csv", header = T, sep = ";", dec = ".")
str(bai)
summary(bai)
str(bai)
bai$logig <- log(bai$ig)
bai.mod <- lm(logig ~ dbh + bal + elev + gwl + dG , data = bai)
summary(bai.mod)
plot(bai.mod)
ing.mod <- glm(ingr ~ sba + sdi + elev + gwl + nvegper, family = "binomial", data = ingr)
summary(ing.mod)
plot(ing.mod)
cou.ing.mod <- glm(Ningr ~ sba + sdi + elev + gwl + nvegper + dG, family = "poisson", data = ingr)
summary(cou.ing.mod)
teststands <- read.table("teststand_for_simulation.csv", header = TRUE, sep = ";")
ingr <- read.table("data_for_ingr.csv", header = T, sep = ";", dec= ".")
ing.mod <- glm(ingr ~ sba + sdi + elev + gwl + nvegper, family = "binomial", data = ingr)
cou.ing.mod <- glm(Ningr ~ sba + sdi + elev + gwl + nvegper + dG, family = "poisson", data = ingr)
teststands <- read.table("teststand_for_simulation.csv", header = TRUE, sep = ";")
aa <- mysimulator(teststands,500, 1000)
aa <- mysimulator(teststands,50,1000)
aa <- mysimulator(teststands,100,1000)
aa <- mysimulator(teststands,200,1000)
aa <- mysimulator(teststands,300,1000)
aa <- mysimulator(teststands,200,1000)
which(aa[["tree"]][["treenr"]] == 200)
aa[["tree"]][["treenr"]] == 200
aa
print(aa[["tree"]][["treenr"]] == 200)
rep(1:4, each = 2)
rep(1:4, each = 2, len = 10)
a <- LETTERS[1:3].
a <- LETTERS[1:3]
paste("V", a, sep = ":") nchar(paste(a, collapse = ","))
paste("V", a, sep = ":") nchar(paste(a, collapse = ",")
paste("V", a, sep = ":")
nchar(paste(a, collapse = ","))
url <- "http://stat.ethz.ch/Teaching/Datasets/WBL/sport.dat"
d.sport <- read.table(url, header = TRUE)
View(d.sport)
View(d.sport)
View(d.sport)
View(d.sport)
apply(d.sport,c(1,3,5), cumsum)
apply(d.sport,c(1,3,5),cumsum)
install.packages("dplyr")
library(ggplot2)
library(dplyr)
data(diamonds, package = "ggplot2")
str(diamonds)
filter(diamons, cut == "Very Good", x > 4, color %in% c("H", "J"))
filter(diamonds, cut == "Very Good", x > 4, color %in% c("H", "J"))
data(nycflights13)
nycflights13
require(nycflights13)
library(dplyr)
library(ggplot2)
require(nycflights13)
require(nycflights13)
require(nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
require(nycflights13)
nycflights13
require(nycflights13)
data(nycflights13)
require(nycflights13)
load(nycflights13)
load("nycflights13")
require("nycflights13")
library(nycflights13)
nyc <- library(nycflights13)
flights
flights <- flights
View(flights)
str(flights)
head(flights)
View(flights)
mutate(flights, minute.h = minute/60, time = hour + minute.h)
flights2 <- mutate(flights, minute.h = minute/60, time = hour + minute.h)
flights2
View(flights2)
View(flights2)
summarise(flights2, av.ar.del = mean(arr_delay))
View(flights2)
summarise(flights2, av.ar.del = mean(arr_delay, na.rm = TRUE))
summarise(flights2, av.ar.del = mean(arr_delay, na.rm = TRUE))
View(flights)
library(ggplot2)
diamonds
diamonds <- diamonds
View(diamonds)
diamonds <- as.data.frame(diamonds)
str(diamonds)
tapply(diamonds, price, mean)
apply(diamonds, 2, mean)
apply(diamonds, 1, mean)
apply(diamonds, 2, mean)
str(diamond)
str(diamonds)
apply(diamonds[,7], 2, mean)
d.sport
apply(diamonds[,7], 2, mean)
diamonds[,7]
apply(diamonds[,8], 2, mean)
apply(diamonds, 2, mean)
apply(diamonds, 2, sum)
diamonds2 <- diamonds[, 7:10]
View(diamonds2)
apply(diamonds2, 2, sum)
apply(diamonds2, 2, mean)
typeof(diamonds)
typeof(diamonds2)
sapply(diamonds2, 2, mean)
apply(diamonds2, 2, mean)
lapply(diamonds2, 2, mean)
lapply(diamonds2, mean)
sapply(diamonds2, mean)
sapply(diamonds2, mean)
lapply(diamonds2, mean)
apply(diamonds2, 2, mean)
lapply(diamonds2, mean)
sapply(diamonds2, mean)
tapply(diamonds$price, diamonds$cut, mean)
by(diamonds$price, diamonds$cut, mean)
aggregate(diamonds$price, diamonds$cut, mean)
aggregate(diamonds$price, c(diamonds$cut), mean)
aggregate(diamonds$price, list(diamonds$cut), mean)
a <- aggregate(diamonds$price, list(diamonds$cut), mean)
a
a <- aggregate(diamonds$price, list(cut= diamonds$cut), mean)
a
a <- aggregate(diamonds$price, list(Cut= diamonds$cut), mean)
a
View(diamonds)
a <- aggregate(diamonds$price, list(Cut= diamonds$cut, Color = diamonds$color), mean)
a
library(dplyr)
diamonds <- as.data.frame(diamonds)
select(diamonds, 1,2,3)
aa <- select(diamonds, 1,2,3)
View(aa)
View(diamonds)
bb <- select(diamonds, "price", "cut")
View(bb)
bb <- select(diamonds, "price", "ct")
bb <- select(diamonds, "price", "cut")
select(diamonds, -ID) #drop column
View(diamonds)
select(diamonds, -10,) #drop column
select(diamonds, -10,-9, -8) #drop column
cc <- select(diamonds, -10,-9, -8) #drop column
View(cc)
cc <- select(diamonds, -10:8) #drop column
cc <- select(diamonds, -10:-8) #drop column
remove(cc)
cc <- select(diamonds, -10:-8) #drop column
dd <- select(diamonds, contains("ce"))
View(dd)
ee <- select(diamonds, matches("c."))
ff <- select(diamonds, matches(".c."))
View(ee)
View(ff)
mutate(diamonds, xARTIy = x + y, ARTIz = xARTIy + z)
gg <- mutate(diamonds, xARTIy = x + y, ARTIz = xARTIy + z)
View(gg)
library(rasterVis)
library(ggplot2)
library(dplyr)
levelplot(SA_all$Annual.Mean.Temperature, margin= list(FUN= "median", axis= TRUE),
main = "Annual mean temperature")
library(corrplot)
library(raster)
SA_all <- list.files("/Volumes/share-ites-1-$/PhD/MaxEnt/maxent_jar/layers_VAL/tiff",
pattern = ".tif$", full.names = T)
SA_worldclim <- SA_all[grep("bio", SA_all)]
SA_environmental <- SA_all[grep("bio", SA_all, invert = T)]
SA_worldclim <- stack(SA_worldclim)
SA_environmental <- stack(SA_environmental)
cor.env <- cor(getValues(SA_environmental), use = "pairwise.complete.obs", method = "spearman")
library(devtools)
install.packages("devtools")
install_github("KIT-IfGG/LandClimTools")
library(devtools)
install_github("KIT-IfGG/LandClimTools")
install.packages("geoR")
library(geoR)
library(geoR)
library(geoR)
library("geoR", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(geoR)
library(geoR)
library(geoR)
library(raster)
r <- raster(matrix(runif(20),5,4))
r
r[r>.5] <- NA
r
g <- as(r, 'SpatialGridDataFrame')
p <- as(r, 'SpatialPixels')
plot(r)
plot(g)
plot(r)
plot(g)
g
r <- raster(matrix(runif(20),5,4))
r
r[r>.5] <- NA
g <- as(r, 'SpatialGridDataFrame')
g
r
values
values(r)
g <- as(r, 'SpatialGridDataFrame')
g
values(g)
g@data
g@grid
g@bbox
g@proj4string
system.time(r)
system.time(r*1)
system.time(g*1)
system.time(plot(g))
system.time(plot(r))
library(georob)
methods(class= "georob")
install.packages("blogdown”)
install.packages("blogdown”)
install.packages(blogdown)
install.packages("blogdown")
contributors()
install.packages("hexSticker")
library("hexSticker", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(hexSticker)
img <- "https://pbs.twimg.com/profile_images/983327997334904832/nJ6aw2TQ_400x400.jpg"
sticker(img, package = "hexSticker")
a <- sticker(img, package = "hexSticker")
plot(a)
img <- "https://pbs.twimg.com/profile_images/983327997334904832/nJ6aw2TQ_400x400.jpg"
a <- sticker(img, package = "hexSticker", p_size = 8)
plot(a)
a <- sticker(img, package = "hexSticker", p_size= 8)
plot(a)
a <- sticker(img, package = "hexSticker", s_x =1)
plot(a)
a <- sticker(img, package = "hexSticker", s_x =1, h_fill= "white")
plot(a)
library(ggplot2)
ggplot(data = mpg)
ggplot(data = mpg) +
<GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
install.packages('addinslist')
addinslist:::addinslistAddin()
ggThemeAssist:::ggThemeAssistAddin()
colourpicker:::colourPickerAddin()
addinslist:::addinslistAddin()
load("~/Desktop/Graphs/Base/Base.RData")
install.packages("fitdistrplus", "maps", "mapproj", "mapdata")
install.packages("fitdistrplus", "mapproj", "mapdata")
install.packages("fitdistrplus")
install.packages("maps")
install.packages("mapproj")
install.packages("mapdata")
install.packages("~/Downloads/trend.acwd_2.0.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/gevXgpd_1.4.4.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/geocors_1.3.4.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/plotmap_2.4.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/ACWD_2.10.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/pcaXcca_1.7.0.tar.gz", repos = NULL, type = "source")
library(ACWD)
library(trend.acwd)
library(fitdistrplus)
# To get an overview on the functions/datasets of the installed packages
help(package="ACWD")
data(birs.moutier.sea.max)
View(birs.moutier.sea.max)
y1 <- 1931; y2 <- 2000
dd <- birs.moutier.sea.max[,c("year","DJF")]
View(dd)
View(dd)
dd <- dd[ii,]
ii <- (dd[,"year"] <= y2) & (dd[,"year"] >= y1)
dd <- dd[ii,]
dd <- birs.moutier.sea.max[,c("year","DJF")]
ii <- (dd[,"year"] <= y2) & (dd[,"year"] >= y1)
dd <- dd[ii,]
# Get a first view on the time series. Are there doubts on data quality
# (unexpected jumps, outliers)?
plot(x=dd[,1],y=dd[,2],type="l",col="blue",xlab="year",ylab="m**3 / s")
View(dd)
# Generate a histogram of the data. Is the data skewed? If so, which way?
# Does this have implications for the suitability of classical linear
plot(x=dd[,1], y=dd[,2], type="l", col="blue", xlab="year", ylab="m**3 / s")
hist(dd[,2],xlab="m**3 / s",col="grey",main="Max DJF Runoff, Birs")
median(dd[,2])
mean(dd[,2])
help(IQR)
IQR(dd[,2])
help(sd)
sd(dd[,2])
hist(dd[,2],xlab="m**3 / s",col="grey",main="Max DJF Runoff, Birs")
plot(x=dd[,1], y=dd[,2], type="l", col="blue", xlab="year", ylab="m**3 / s")
help(IQR)
tablom <- read.csv("Downloads/results.csv")
tablom
ggplot(tablom, aes(x = std4, tablom$level, y = std4, fill = sp) +
geom_boxplot() +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
facet_wrap(~ DOMINANT_M, scale = "free") + ylim(0,0.72)
ggplot(tablom, aes(x = std4, tablom$level, y = std4, fill = sp) +
geom_boxplot() +
ylim(0,0.72)
theme(axis.text.x = element_text(angle=90,hjust=1)) +
ggplot(tablom, aes(x = std4, tablom$level, y = std4, fill = sp) +
geom_boxplot() +
ylim(0,0.72) +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
facet_wrap(~ DOMINANT_M, scale = "free")
tablom
View(tablom)
ggplot(tablom, aes(x = std4, tablom$level, y = std4, fill = sp)) +
geom_boxplot() +
ylim(0,0.72) +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
facet_wrap(~ DOMINANT_M, scale = "free")
library(ggplot2)
ggplot(tablom, aes(x = std4, tablom$level, y = std4, fill = sp)) +
geom_boxplot() +
ylim(0,0.72) +
theme(axis.text.x = element_text(angle=90,hjust=1)) +
facet_wrap(~ DOMINANT_M, scale = "free")
View(tablom)
View(tablom)
View(tablom)
View(tablom)
View(tablom)
View(tablom)
ggplot(tablom, aes(x = std2, y = DOMINANT_M)) +
geom_bar() +
ggplot(tablom, aes(x = std2, y = DOMINANT_M)) +
geom_bar()
View(tablom)
ggplot(tablom, aes(x = DOMINANT_M, y = st2)) +
geom_bar()
View(tablom)
ggplot(tablom, aes(x = DOMINANT_M, y = std2)) +
geom_bar()
ggplot(tablom, aes(x = std2)) +
geom_bar()
ggplot(tablom, aes(x = std2, fill= DOMINANT_M)) +
geom_bar()
library(ggplot2)
library(tidyverse)
tablom <- as.tibble(tablom)
tablom
tablom_lf <- reshape2::melt(tablom, id= c("sid", "DOMINANT_M","sp",
"ID", "dem", "demclass"))
tablom_lf
View(tablom_lf)
View(tablom_lf)
View(tablom_lf)
View(tablom_lf)
View(tablom)
View(tablom)
tablom_lf <- reshape2::melt(tablom, id= c("sid", "DOMINANT_M","sp",
"ID", "dem", "demclass", "northness",
"aspect_class"))
View(tablom_lf)
ggplot(tablom, aes(x = value, fill= DOMINANT_M)) +
geom_bar()
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar()
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar() +
facet_wrap(~ value)
View(tablom_lf)
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar() +
facet_wrap(~ variable)
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar() +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar() +
facet_wrap(~ variable, scales = "free_x")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(position = "dodge") +
facet_wrap(~ variable, scales = "free_x")
View(tablom)
View(tablom_lf)
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(position = "identity") +
facet_wrap(~ variable, scales = "free_x")
View(tablom_lf)
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(position = "dodge2") +
facet_wrap(~ variable, scales = "free_x")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(position = "jitterdodge") +
facet_wrap(~ variable, scales = "free_x")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(position = "jitter") +
facet_wrap(~ variable, scales = "free_x")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(position = "nudge") +
facet_wrap(~ variable, scales = "free_x")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar() +
facet_wrap(~ variable, scales = "free_x")
View(tablom_lf)
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free_x")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_histogram(position = "dodge") +
facet_wrap(~ variable, scales = "free_x")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_histogram(position = "dodge") +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_histogram() +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_histogram(binwidth = 20) +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar() +
facet_wrap(~ variable, scales = "free")
View(tablom_lf)
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(width = 30) +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(width = 100) +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(width = 2000) +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(width = 5000) +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(width = 5000) +
facet_wrap(~ variable, scales = "free")
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(width = 5000) +
facet_wrap(~ variable)
ggplot(tablom_lf, aes(x = value, fill= DOMINANT_M)) +
geom_bar(width = 0.9) +
facet_wrap(~ variable, scales = "free")
library(tidyverse)
library(RColorBrewer)
setwd("~/GitHub/DogaBilimleriR/")
file_adaylar <- as.tibble(read.csv("Katilimcilar/katilimcilar.csv"))
# remove duplicates
adaylar <- file_adaylar %>%
distinct(isim, .keep_all = TRUE) %>%
select(isim, university, area, level, PreviousWorkshop, rlevel,
department_, study_area)
# remove prep years and edit factors
adaylar <- adaylar %>%
filter(level != "Hazırlık" ) %>%
mutate(level = factor(level, levels = c("1_2", "3_4","Mezun", "YL_Doktora",
"Doktora+"))) %>%
mutate(level = recode(level, "1_2" = "Lisans 1",
"3_4" = "Lisans 2",
"Mezun" = "Lisans mezunu",
"YL_Doktora" = "Yüksek Eğitim"))
# graph
ggplot(adaylar, aes(level, fill= rlevel)) +
geom_histogram(stat= "count") +
scale_fill_brewer(palette= "Set2", direction = -1)
# filters
adaylar_s <- adaylar %>%
filter(rlevel %in% c("Giriş", "Hiç")) %>%
filter(level %in% c("Yüksek Eğitim", "Doktora+")) %>%
filter(PreviousWorkshop == "Hayır") %>%
filter(area %in% c("Atmosfer ve iklim", "Biyocoğrafya", "Botanik",
"Deniz Bilimleri", "Doğa Koruma", "Ekoloji",
"Ornitoloji", "Orman", "Zooloji")) %>%
filter(isim != "Kiraz Erciyas Yavuz") %>%
filter(isim != "Gülsima Usluer") %>%
filter(isim != "İrem Tüfekcioğlu")
adaylar_ek <- adaylar %>%
filter(isim %in% c("Melike Karaca Bulut ", "Deniz ERDOĞAN DERELİ", "Cansu Yörgüç",
"Dilek arslan", "Lider Sinav"))
adaylar_secim <- bind_rows(adaylar_s, adaylar_ek)
write.table(adaylar_secim, "saklı_secilmisler.txt", fileEncoding = "UTF-8")
adaylar_yedek <- anti_join(adaylar, adaylar_secim)
View(adaylar_yedek)
